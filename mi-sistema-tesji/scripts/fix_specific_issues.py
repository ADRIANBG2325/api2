#!/usr/bin/env python3
"""
Script espec√≠fico para arreglar los problemas reportados - Versi√≥n 2
Maneja correctamente la estructura existente de la base de datos
"""

import sqlite3
import hashlib
import secrets
from datetime import datetime

def hash_password(password: str) -> str:
    """Crear hash de contrase√±a"""
    salt = secrets.token_hex(16)
    password_hash = hashlib.sha256((password + salt).encode()).hexdigest()
    return f"{salt}:{password_hash}"

def inspect_database_structure(db_path="tesji_rfid_system.db"):
    """Inspeccionar la estructura actual de la base de datos"""
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    print("üîç INSPECCIONANDO ESTRUCTURA DE BASE DE DATOS...")
    print("=" * 60)
    
    # Obtener todas las tablas
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
    tables = cursor.fetchall()
    
    for table in tables:
        table_name = table[0]
        print(f"\nüìã Tabla: {table_name}")
        
        # Obtener estructura de la tabla
        cursor.execute(f"PRAGMA table_info({table_name})")
        columns = cursor.fetchall()
        
        for col in columns:
            col_id, name, data_type, not_null, default_val, pk = col
            null_str = "NOT NULL" if not_null else "NULL"
            pk_str = "PRIMARY KEY" if pk else ""
            default_str = f"DEFAULT {default_val}" if default_val else ""
            print(f"   - {name}: {data_type} {null_str} {pk_str} {default_str}")
    
    conn.close()
    print("=" * 60)

def fix_database_issues_v2(db_path="tesji_rfid_system.db"):
    """Arreglar problemas espec√≠ficos - Versi√≥n 2"""
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    print("üîß ARREGLANDO PROBLEMAS ESPEC√çFICOS - V2...")
    print("=" * 50)
    
    # 1. VERIFICAR Y AGREGAR COLUMNA SALON SI NO EXISTE
    print("1Ô∏è‚É£ Verificando columna 'salon' en usuarios...")
    try:
        cursor.execute("PRAGMA table_info(usuarios)")
        columns = [row[1] for row in cursor.fetchall()]
        
        if 'salon' not in columns:
            cursor.execute('ALTER TABLE usuarios ADD COLUMN salon TEXT')
            print("   ‚úÖ Columna 'salon' agregada")
        else:
            print("   ‚úÖ Columna 'salon' ya existe")
    except Exception as e:
        print(f"   ‚ùå Error con columna salon: {e}")
    
    # 2. ASEGURAR QUE EXISTAN LAS CARRERAS B√ÅSICAS
    print("\n2Ô∏è‚É£ Verificando carreras...")
    
    # Verificar si la tabla carreras existe
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='carreras'")
    if not cursor.fetchone():
        cursor.execute('''
        CREATE TABLE carreras (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            nombre TEXT NOT NULL UNIQUE,
            codigo TEXT NOT NULL UNIQUE,
            semestres INTEGER NOT NULL DEFAULT 9,
            activa BOOLEAN DEFAULT TRUE,
            fecha_creacion DATETIME DEFAULT CURRENT_TIMESTAMP
        )
        ''')
        print("   ‚úÖ Tabla carreras creada")
    
    # Insertar carreras b√°sicas
    carreras_basicas = [
        ("Ingenier√≠a en Sistemas Computacionales", "ISC", 9),
        ("Ingenier√≠a Industrial", "II", 9),
        ("Ingenier√≠a Mec√°nica", "IM", 9),
        ("Ingenier√≠a en Gesti√≥n Empresarial", "IGE", 9),
        ("Licenciatura en Administraci√≥n", "LA", 8),
        ("Ingenier√≠a Electr√≥nica", "IE", 9),
        ("Ingenier√≠a Civil", "IC", 9)
    ]
    
    for nombre, codigo, semestres in carreras_basicas:
        cursor.execute('SELECT id FROM carreras WHERE codigo = ?', (codigo,))
        if not cursor.fetchone():
            cursor.execute('''
            INSERT INTO carreras (nombre, codigo, semestres, activa)
            VALUES (?, ?, ?, ?)
            ''', (nombre, codigo, semestres, True))
            print(f"   ‚úÖ Carrera agregada: {nombre}")
        else:
            print(f"   ‚úÖ Carrera ya existe: {nombre}")
    
    # 3. VERIFICAR ESTRUCTURA DE HORARIOS_DETALLADOS
    print("\n3Ô∏è‚É£ Verificando estructura de horarios_detallados...")
    
    cursor.execute("PRAGMA table_info(horarios_detallados)")
    horarios_columns = {row[1]: row for row in cursor.fetchall()}
    
    print("   Columnas encontradas:")
    for col_name, col_info in horarios_columns.items():
        print(f"     - {col_name}: {col_info[2]} {'NOT NULL' if col_info[3] else 'NULL'}")
    
    # 4. CREAR SALONES SI LA TABLA EXISTE
    if 'salon_id' in horarios_columns:
        print("\n4Ô∏è‚É£ Verificando tabla salones...")
        
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='salones'")
        if not cursor.fetchone():
            cursor.execute('''
            CREATE TABLE salones (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                nombre TEXT NOT NULL UNIQUE,
                capacidad INTEGER DEFAULT 40,
                activo BOOLEAN DEFAULT TRUE,
                fecha_creacion DATETIME DEFAULT CURRENT_TIMESTAMP
            )
            ''')
            print("   ‚úÖ Tabla salones creada")
        
        # Insertar salones b√°sicos
        salones_basicos = [
            ("N1", 45),
            ("N2", 45),
            ("L1", 30),
            ("L2", 30),
            ("A1", 50),
            ("A2", 50)
        ]
        
        for nombre, capacidad in salones_basicos:
            cursor.execute('SELECT id FROM salones WHERE nombre = ?', (nombre,))
            if not cursor.fetchone():
                cursor.execute('''
                INSERT INTO salones (nombre, capacidad, activo)
                VALUES (?, ?, ?)
                ''', (nombre, capacidad, True))
                print(f"   ‚úÖ Sal√≥n agregado: {nombre}")
            else:
                print(f"   ‚úÖ Sal√≥n ya existe: {nombre}")
    
    # 5. CREAR GRUPOS B√ÅSICOS
    print("\n5Ô∏è‚É£ Verificando grupos...")
    
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='grupos'")
    if not cursor.fetchone():
        cursor.execute('''
        CREATE TABLE grupos (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            nombre TEXT NOT NULL,
            carrera_id INTEGER NOT NULL,
            semestre INTEGER NOT NULL,
            periodo TEXT NOT NULL DEFAULT '2024-2025',
            salon TEXT,
            turno TEXT,
            activo BOOLEAN DEFAULT TRUE,
            fecha_creacion DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (carrera_id) REFERENCES carreras (id)
        )
        ''')
        print("   ‚úÖ Tabla grupos creada")
    
    # Obtener ID de ISC
    cursor.execute('SELECT id FROM carreras WHERE codigo = "ISC"')
    carrera_isc = cursor.fetchone()
    if carrera_isc:
        carrera_isc_id = carrera_isc[0]
        
        grupos_basicos = [
            ("Grupo 3401", carrera_isc_id, 4, "2024-2025", "N1", "Matutino"),
            ("Grupo 3402", carrera_isc_id, 4, "2024-2025", "N2", "Vespertino")
        ]
        
        for nombre, carrera_id, semestre, periodo, salon, turno in grupos_basicos:
            cursor.execute('SELECT id FROM grupos WHERE nombre = ?', (nombre,))
            if not cursor.fetchone():
                cursor.execute('''
                INSERT INTO grupos (nombre, carrera_id, semestre, periodo, salon, turno, activo)
                VALUES (?, ?, ?, ?, ?, ?, ?)
                ''', (nombre, carrera_id, semestre, periodo, salon, turno, True))
                print(f"   ‚úÖ Grupo agregado: {nombre}")
            else:
                print(f"   ‚úÖ Grupo ya existe: {nombre}")
    
    # 6. CREAR MATERIAS B√ÅSICAS
    print("\n6Ô∏è‚É£ Verificando materias...")
    
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='materias'")
    if not cursor.fetchone():
        cursor.execute('''
        CREATE TABLE materias (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            nombre TEXT NOT NULL,
            carrera_id INTEGER NOT NULL,
            semestre INTEGER NOT NULL,
            codigo TEXT,
            creditos INTEGER DEFAULT 5,
            horas_teoria INTEGER DEFAULT 0,
            horas_practica INTEGER DEFAULT 0,
            clave_oficial TEXT,
            activa BOOLEAN DEFAULT TRUE,
            fecha_creacion DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (carrera_id) REFERENCES carreras (id)
        )
        ''')
        print("   ‚úÖ Tabla materias creada")
    
    if carrera_isc:
        materias_4to = [
            ("Ecuaciones Diferenciales", "ACF-0905", 5, 3, 2),
            ("M√©todos Num√©ricos", "SCC-1017", 4, 2, 2),
            ("T√≥picos Avanzados de Programaci√≥n", "SCD-1027", 5, 2, 3),
            ("Fundamentos de Base de Datos", "AEF-1031", 5, 3, 2),
            ("Taller de Sistemas Operativos", "SCA-1026", 4, 0, 4),
            ("Arquitectura de Computadoras", "SCD-1003", 5, 2, 3),
            ("Taller de √âtica", "ACA-0907", 4, 0, 4),
            ("Ingl√©s IV", "ING-004", 2, 2, 0)
        ]
        
        for nombre, codigo, creditos, ht, hp in materias_4to:
            cursor.execute('SELECT id FROM materias WHERE codigo = ? AND carrera_id = ?', (codigo, carrera_isc_id))
            if not cursor.fetchone():
                cursor.execute('''
                INSERT INTO materias (
                    nombre, codigo, carrera_id, semestre, creditos, 
                    horas_teoria, horas_practica, clave_oficial, activa
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (nombre, codigo, carrera_isc_id, 4, creditos, ht, hp, codigo, True))
                print(f"   ‚úÖ Materia agregada: {nombre}")
            else:
                print(f"   ‚úÖ Materia ya existe: {nombre}")
    
    # 7. CREAR MAESTROS B√ÅSICOS
    print("\n7Ô∏è‚É£ Verificando maestros...")
    
    maestros_basicos = [
        ("Ing. Rodolfo Guadalupe Alc√°ntara Rosales", "PROF001", "rodolfo.alcantara@tesji.edu.mx", "Matem√°ticas"),
        ("Lic. Juan Alberto Mart√≠nez Zamora", "PROF002", "juan.martinez@tesji.edu.mx", "M√©todos Num√©ricos"),
        ("V√≠ctor David Maya Arce", "PROF003", "victor.maya@tesji.edu.mx", "Programaci√≥n"),
        ("Mtra. Yadira Esther Jim√©nez P√©rez", "PROF004", "yadira.jimenez@tesji.edu.mx", "Base de Datos"),
        ("Mtro. Anselmo Mart√≠nez Montalvo", "PROF005", "anselmo.martinez@tesji.edu.mx", "Sistemas Operativos"),
        ("Ing. Alfredo Aguilar L√≥pez", "PROF006", "alfredo.aguilar@tesji.edu.mx", "Hardware"),
        ("C.P. Sonia V√°zquez Alc√°ntara", "PROF007", "sonia.vazquez@tesji.edu.mx", "√âtica"),
        ("L.L. Isodoro Cruz Huitr√≥n", "PROF008", "isodoro.cruz@tesji.edu.mx", "Ingl√©s")
    ]
    
    for nombre, matricula, email, especialidad in maestros_basicos:
        cursor.execute('SELECT id FROM usuarios WHERE matricula = ?', (matricula,))
        if not cursor.fetchone():
            password_hash = hash_password("123456")
            cursor.execute('''
            INSERT INTO usuarios (
                nombre_completo, matricula, email, password_hash, rol, 
                carrera_id, especialidad, activo
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', (nombre, matricula, email, password_hash, 'teacher', carrera_isc_id, especialidad, True))
            print(f"   ‚úÖ Maestro agregado: {nombre}")
        else:
            print(f"   ‚úÖ Maestro ya existe: {nombre}")
    
    # 8. CREAR HORARIOS SEG√öN LA ESTRUCTURA EXISTENTE
    print("\n8Ô∏è‚É£ Verificando horarios...")
    
    # Obtener IDs necesarios
    cursor.execute('SELECT id FROM grupos WHERE nombre = "Grupo 3401"')
    grupo_3401 = cursor.fetchone()
    
    if grupo_3401:
        grupo_3401_id = grupo_3401[0]
        
        # Obtener salon_id si existe la columna
        salon_id = None
        if 'salon_id' in horarios_columns:
            cursor.execute('SELECT id FROM salones WHERE nombre = "N1"')
            salon_result = cursor.fetchone()
            if salon_result:
                salon_id = salon_result[0]
        
        # Horarios para N1
        horarios_n1 = [
            # Lunes
            ("M√©todos Num√©ricos", "Lunes", "07:00", "09:00", "Teor√≠a"),
            ("Ecuaciones Diferenciales", "Lunes", "09:00", "12:00", "Teor√≠a"),
            ("Fundamentos de Base de Datos", "Lunes", "15:00", "18:00", "Teor√≠a"),
            
            # Martes
            ("Ingl√©s IV", "Martes", "09:00", "11:00", "Idioma"),
            ("Arquitectura de Computadoras", "Martes", "11:00", "13:00", "Teor√≠a"),
            ("T√≥picos Avanzados de Programaci√≥n", "Martes", "13:00", "15:00", "Pr√°ctica"),
            
            # Mi√©rcoles
            ("M√©todos Num√©ricos", "Mi√©rcoles", "07:00", "09:00", "Teor√≠a"),
            ("Ingl√©s IV", "Mi√©rcoles", "09:00", "11:00", "Idioma"),
            ("Ecuaciones Diferenciales", "Mi√©rcoles", "11:00", "13:00", "Teor√≠a"),
            ("Taller de Sistemas Operativos", "Mi√©rcoles", "13:00", "15:00", "Pr√°ctica"),
            
            # Jueves
            ("Ingl√©s IV", "Jueves", "07:00", "09:00", "Idioma"),
            ("Taller de √âtica", "Jueves", "09:00", "11:00", "Pr√°ctica"),
            ("Fundamentos de Base de Datos", "Jueves", "11:00", "13:00", "Teor√≠a"),
            ("T√≥picos Avanzados de Programaci√≥n", "Jueves", "14:00", "16:00", "Pr√°ctica"),
            
            # Viernes
            ("Taller de Sistemas Operativos", "Viernes", "07:00", "09:00", "Pr√°ctica"),
            ("Taller de √âtica", "Viernes", "09:00", "11:00", "Pr√°ctica"),
            ("Arquitectura de Computadoras", "Viernes", "11:00", "14:00", "Teor√≠a")
        ]
        
        for materia_nombre, dia, hora_inicio, hora_fin, tipo in horarios_n1:
            # Buscar materia
            cursor.execute('SELECT id FROM materias WHERE nombre LIKE ?', (f"%{materia_nombre}%",))
            materia = cursor.fetchone()
            if materia:
                materia_id = materia[0]
                
                # Verificar si ya existe el horario
                cursor.execute('''
                SELECT id FROM horarios_detallados 
                WHERE materia_id = ? AND grupo_id = ? AND dia_semana = ? AND hora_inicio = ?
                ''', (materia_id, grupo_3401_id, dia, hora_inicio))
                
                if not cursor.fetchone():
                    # Insertar seg√∫n la estructura de la tabla
                    if 'salon_id' in horarios_columns and salon_id:
                        cursor.execute('''
                        INSERT INTO horarios_detallados (
                            materia_id, grupo_id, salon_id, dia_semana, hora_inicio, hora_fin, tipo_clase, activo
                        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                        ''', (materia_id, grupo_3401_id, salon_id, dia, hora_inicio, hora_fin, tipo, True))
                    else:
                        cursor.execute('''
                        INSERT INTO horarios_detallados (
                            materia_id, grupo_id, dia_semana, hora_inicio, hora_fin, tipo_clase, activo
                        ) VALUES (?, ?, ?, ?, ?, ?, ?)
                        ''', (materia_id, grupo_3401_id, dia, hora_inicio, hora_fin, tipo, True))
                    
                    print(f"   ‚úÖ Horario agregado: {materia_nombre} - {dia} {hora_inicio}")
    
    # 9. CREAR ASIGNACIONES MAESTRO-MATERIA
    print("\n9Ô∏è‚É£ Verificando asignaciones maestro...")
    
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='asignaciones_maestro'")
    if not cursor.fetchone():
        cursor.execute('''
        CREATE TABLE asignaciones_maestro (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            maestro_id INTEGER NOT NULL,
            materia_id INTEGER NOT NULL,
            grupo_id INTEGER NOT NULL,
            periodo TEXT NOT NULL DEFAULT '2024-2025',
            activa BOOLEAN DEFAULT TRUE,
            fecha_asignacion DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (maestro_id) REFERENCES usuarios (id),
            FOREIGN KEY (materia_id) REFERENCES materias (id),
            FOREIGN KEY (grupo_id) REFERENCES grupos (id)
        )
        ''')
        print("   ‚úÖ Tabla asignaciones_maestro creada")
    
    # Crear asignaciones
    asignaciones = [
        ("PROF001", "Ecuaciones Diferenciales"),
        ("PROF002", "M√©todos Num√©ricos"),
        ("PROF003", "T√≥picos Avanzados de Programaci√≥n"),
        ("PROF004", "Fundamentos de Base de Datos"),
        ("PROF005", "Taller de Sistemas Operativos"),
        ("PROF006", "Arquitectura de Computadoras"),
        ("PROF007", "Taller de √âtica"),
        ("PROF008", "Ingl√©s IV")
    ]
    
    for matricula_maestro, nombre_materia in asignaciones:
        # Buscar maestro
        cursor.execute('SELECT id FROM usuarios WHERE matricula = ? AND rol = "teacher"', (matricula_maestro,))
        maestro = cursor.fetchone()
        
        # Buscar materia
        cursor.execute('SELECT id FROM materias WHERE nombre LIKE ?', (f"%{nombre_materia}%",))
        materia = cursor.fetchone()
        
        if maestro and materia and grupo_3401:
            maestro_id = maestro[0]
            materia_id = materia[0]
            
            cursor.execute('''
            SELECT id FROM asignaciones_maestro 
            WHERE maestro_id = ? AND materia_id = ? AND grupo_id = ?
            ''', (maestro_id, materia_id, grupo_3401_id))
            
            if not cursor.fetchone():
                cursor.execute('''
                INSERT INTO asignaciones_maestro (
                    maestro_id, materia_id, grupo_id, periodo, activa
                ) VALUES (?, ?, ?, ?, ?)
                ''', (maestro_id, materia_id, grupo_3401_id, "2024-2025", True))
                print(f"   ‚úÖ Asignaci√≥n creada: {matricula_maestro} -> {nombre_materia}")
    
    # 10. ASIGNAR ESTUDIANTES A GRUPOS Y SALONES
    print("\nüîü Asignando estudiantes a grupos...")
    
    # Estudiantes del grupo N1 (3401)
    estudiantes_n1 = [
        "202323069", "202323274", "202323221", "202323699", "202323108",
        "202323090", "202323080", "202323006", "202323116", "202323288"
    ]
    
    # Estudiantes del grupo N2 (3402)
    estudiantes_n2 = [
        "202323734", "202323768", "202323367", "202323728", "202323883",
        "202323830", "202323377", "202323352", "202323652", "202323737"
    ]
    
    # Asignar estudiantes N1
    for matricula in estudiantes_n1:
        cursor.execute('SELECT id FROM usuarios WHERE matricula = ? AND rol = "student"', (matricula,))
        estudiante = cursor.fetchone()
        if estudiante and grupo_3401:
            cursor.execute('UPDATE usuarios SET grupo_id = ?, salon = ? WHERE id = ?', 
                         (grupo_3401_id, "N1", estudiante[0]))
            print(f"   ‚úÖ Estudiante {matricula} asignado a Grupo 3401 (N1)")
    
    # Buscar grupo 3402
    cursor.execute('SELECT id FROM grupos WHERE nombre = "Grupo 3402"')
    grupo_3402 = cursor.fetchone()
    if grupo_3402:
        grupo_3402_id = grupo_3402[0]
        
        # Asignar estudiantes N2
        for matricula in estudiantes_n2:
            cursor.execute('SELECT id FROM usuarios WHERE matricula = ? AND rol = "student"', (matricula,))
            estudiante = cursor.fetchone()
            if estudiante:
                cursor.execute('UPDATE usuarios SET grupo_id = ?, salon = ? WHERE id = ?', 
                             (grupo_3402_id, "N2", estudiante[0]))
                print(f"   ‚úÖ Estudiante {matricula} asignado a Grupo 3402 (N2)")
    
    conn.commit()
    conn.close()
    
    print("\nüéâ PROBLEMAS ESPEC√çFICOS ARREGLADOS - V2")
    print("=" * 50)
    print("‚úÖ Estructura de base de datos respetada")
    print("‚úÖ Carreras completas en admin")
    print("‚úÖ Horarios configurados correctamente")
    print("‚úÖ Asignaciones maestro-materia creadas")
    print("‚úÖ Grupos y salones asignados")
    print("=" * 50)

def main():
    print("üîß ARREGLO ESPEC√çFICO DE PROBLEMAS TESJI - V2")
    print("=" * 50)
    print("Primero inspeccionaremos la estructura existente...")
    print("=" * 50)
    
    try:
        # Primero inspeccionar la estructura
        inspect_database_structure()
        
        # Luego arreglar los problemas
        fix_database_issues_v2()
        
        print("\nüéâ TODOS LOS PROBLEMAS ARREGLADOS")
        print("‚úÖ Reinicia el servidor para ver los cambios")
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
